#!/bin/bash

#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2021, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


if test $# -lt 3 -o $# -gt 4; then
  printf "usage: %s kim-dir distro tag [ccache]\n" $0
  exit 1
fi

KIM_DIR="$1"
if test ! -d "${KIM_DIR}"; then
  printf "error: kim-dir does not exist.\n"
  exit 1
fi

DISTRO="$2"
if test ! -f "${KIM_DIR}/docker/Dockerfile.${DISTRO}"; then
  printf "error: distro not supported at this time\n"
  exit 1
fi

TAG="$3"

if test $# -eq 4; then
  CCACHE_DIR="$4"
  if test ! -d "${CCACHE_DIR}"; then
    printf "error: ccache does not exist.\n"
    exit 1
  fi
else
  CCACHE_DIR=""
fi

CONTEXT="${PWD}/context-for-docker"
if test -d "${CONTEXT}"; then
  printf "error: 'context-for-docker' already exists in PWD.\n"
  exit 1
fi

# check for required env
if test x"" = x"${CMAKE_BUILD_TYPE}"; then
  printf "error: must define CMAKE_BUILD_TYPE.\n"
  exit 1
fi

# Store env to pass to docker if COVERAGE requested
if test x"${COVERAGE}" != x""; then
  # https://docs.codecov.io/docs/testing-with-docker
  ci_env=`bash <(curl -s https://codecov.io/env)`
fi

set -xv
mkdir "${CONTEXT}" || exit $?
cd "${CONTEXT}" || exit $?
if test x"" = x"${CCACHE_DIR}"; then
  mkdir "ccache" || exit $?
else
  cp -r "${CCACHE_DIR}" "ccache" || exit $?
fi
(cd "${KIM_DIR}" && git archive --format tar --prefix=kim-api/ HEAD) | \
  tar -xf - || exit $?
cp -r "${KIM_DIR}/docker" "docker" || exit $?
cp "${KIM_DIR}/scripts/ci-build-and-test" "." || exit $?
cp "${KIM_DIR}/scripts/run-cmds-from-install" "kim-api/scripts/" || exit $?

docker build -t "${TAG}" -f "docker/Dockerfile.${DISTRO}" .  &&
  docker build -t "${TAG}_w_common" -f "docker/Dockerfile.common" \
         \
         --build-arg B_DOCKER_FROM="${TAG}" \
         \
         `# specify build type (required)` \
         --build-arg B_CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE}" \
         \
         `# specify compilers (optional)` \
         --build-arg B_CXX="${CXX}" \
         --build-arg B_CC="${CC}" \
         --build-arg B_FC="${FC}" \
         \
         `# specify compiler settings (optional)` \
         --build-arg B_CXXFLAGS="${CXXFLAGS}" \
         --build-arg B_CFLAGS="${CFLAGS}" \
         --build-arg B_FFLAGS="${FFLAGS}" \
         \
         `# specify additional build tools (optional; bools: "true" or "")` \
         --build-arg B_CXX17="${CXX17:+true}" \
         --build-arg B_IWYU="${IWYU:+true}" \
         --build-arg B_SANITIZE="${SANITIZE:+true}" \
         --build-arg B_COVERAGE="${COVERAGE:+true}" \
         \
         .  &&
  docker run --cap-add SYS_PTRACE --cidfile container.pid ${ci_env} \
         "${TAG}_w_common" &&
  rm -rf ccache &&
  CON=`cat container.pid` &&
  docker cp "${CON}:/home/kim/.ccache" ccache &&
  docker rm "${CON}" || exit $?
set +xv
